package com.yourcompany.ludo.service;

import com.yourcompany.ludo.model.GameSession;
import com.yourcompany.ludo.model.MatchRequest;
import com.yourcompany.ludo.model.User;
import com.yourcompany.ludo.repository.GameSessionRepository;
import com.yourcompany.ludo.repository.MatchRequestRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Optional;

@Service
public class MatchService {

    @Autowired
    private MatchRequestRepository matchRequestRepository;

    @Autowired
    private GameSessionRepository gameSessionRepository;

    @Autowired
    private UserService userService;

    /**
     * üéØ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö‡¶ø‡¶Ç ‡¶≤‡¶ú‡¶ø‡¶ï
     * - ‡¶´‡¶ø ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶ï‡¶æ‡¶ü‡¶¨‡ßá ‡¶®‡¶æ
     * - ‡¶¶‡ßÅ‡¶á‡¶ú‡¶®‡¶á ‡¶Ö‡¶®‡ßç‡¶§‡¶§ ‡ß® ‡¶¨‡¶æ‡¶∞ ‡¶°‡¶æ‡¶á‡¶∏ ‡¶∞‡ßã‡¶≤ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶´‡¶ø ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶π‡¶¨‡ßá
     * - ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö ‡¶π‡¶≤‡ßá matchStartTimestamp ‡¶ï‡ßá‡¶¨‡¶≤ controller ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßá‡¶ü ‡¶π‡¶¨‡ßá
     */
    @Transactional
    public GameSession tryMatch(User user, int entryFee) {
        if (user.getBalance() == null || user.getBalance() < entryFee) {
            throw new IllegalArgumentException("‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶®‡¶Ø‡¶º");
        }

        // üîπ ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã unmatched ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ (2 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡ßÅ‡¶∞‡¶®‡ßã)
        matchRequestRepository.deleteOldUnmatchedRequests(LocalDateTime.now().minusMinutes(2));

        // üîπ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶™‡¶ï‡ßç‡¶∑ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ
        Optional<MatchRequest> opponentRequestOpt =
                matchRequestRepository.findFirstByEntryFeeAndMatchedFalseAndUserNot(entryFee, user);

        if (opponentRequestOpt.isPresent()) {
            // üîπ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá
            MatchRequest opponentRequest = opponentRequestOpt.get();
            opponentRequest.setMatched(true);
            matchRequestRepository.save(opponentRequest);

            // üîπ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü
            MatchRequest userRequest = new MatchRequest();
            userRequest.setUser(user);
            userRequest.setEntryFee(entryFee);
            userRequest.setMatched(true);
            userRequest.setRequestTime(LocalDateTime.now());
            matchRequestRepository.save(userRequest);

            // üîπ ‡¶ó‡ßá‡¶Æ ‡¶∏‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø

            // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá ‡¶™‡ßç‡¶≤‡ßá‡ßü‡¶æ‡¶∞ ‡ßß
            User firstPlayer = opponentRequest.getUser();
            User secondPlayer = user;

            GameSession gameSession = new GameSession();
            gameSession.setPlayer1(firstPlayer);
            gameSession.setPlayer2(secondPlayer);
            gameSession.setEntryFee(entryFee);
            gameSession.setTotalPot(entryFee * 2);
            gameSession.setPlatformFee((int) (gameSession.getTotalPot() * 0.10));
            gameSession.setStatus("ONGOING");
            gameSession.setStartTime(LocalDateTime.now());

            // ‚úÖ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶°‡¶æ‡¶á‡¶∏ ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ì ‡¶´‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
            gameSession.setPlayer1DiceCount(0);
            gameSession.setPlayer2DiceCount(0);
            gameSession.setFeeDeducted(false);

            // ‚ùå ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶∞ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá matchStartTimestamp ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ
            // gameSession.setMatchStartTimestamp(System.currentTimeMillis() + 10_000);

            gameSessionRepository.save(gameSession);

            return gameSession;
        } else {
            // üîπ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶™‡¶ï‡ßç‡¶∑ ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
            MatchRequest newRequest = new MatchRequest();
            newRequest.setUser(user);
            newRequest.setEntryFee(entryFee);
            newRequest.setMatched(false);
            newRequest.setRequestTime(LocalDateTime.now());
            matchRequestRepository.save(newRequest);

            return null;
        }
    }
}
